name: Android CI

on:
  push:
    branches: [ "master","develop" ]
  pull_request:
    branches: [ "master","develop" ]

jobs:
  test:
    name: ALl tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up ruby env
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.2
          bundler-cache: true

      - name: Touch local properties
        run: touch local.properties

      - name: Add Api Key
        run: echo "apiKey=\"\"" >> local.properties

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Unit Tests
        run: bundle exec fastlane android test

  build:
    needs: [ test ]
    name: Setup Environment and build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Touch local properties
        run: touch local.properties

      - name: Add Api Key
        run: echo "apiKey=\"\"" >> local.properties

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --info

#      - name: Run Ktlint
#        run: ./gradlew ktlintStagingDebugCheck

      - name: Decode Google Service JSON File
        uses: timheuer/base64-to-file@v1
        id: google_services
        with:
          fileName: "google_services.json"
          encodedString: ${{ secrets.GOOGLE_SERVICES }}

      - name: Decode Keystore File
        uses: timheuer/base64-to-file@v1
        id: keystore_file
        with:
          fileName: "google_services.json"
          encodedString: ${{ secrets.KEYSTORE_FILE }}

      - name: Define version code with offset
        env:
          RUN_NUMBER: ${{ github.run_number }}
          INITIAL_VERSION_CODE: 73
        run: |
          VERSION_CODE=$((INITIAL_VERSION_CODE + RUN_NUMBER))
          echo "version_code=$VERSION_CODE" >> $GITHUB_ENV        

#      - name: Update version code
#        uses: chkfung/android-version-actions@v1.1
#        with:
#          gradlePath: android/app/build.gradle
#          versionCode: ${{ env.version_code }}

#      - name: Generate app bundle
#        run: ./gradlew app:bundleRelease --stacktrace

      - name: Generate Release APK
        run: ./gradlew assembleRelease

      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.KEYSTORE_FILE }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      - uses: actions/upload-artifact@master
        with:
          name: release.apk
          path: ${{steps.sign_app.outputs.signedReleaseFile}}
#      - name: Sign app bundle
#        run: |
#          jarsigner -keystore app/*.jks \
#          -storepass ${{ secrets.KEY_STORE_PASSWORD }} -keypass ${{ secrets.KEY_PASSWORD }} \
#          app/build/outputs/bundle/release/app-release.aab ${{ secrets.ALIAS }}

  deploy-firebase:
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@master
        with:
          name: release.apk
      - name: upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          groups: Testers
          file: app-release-unsigned-signed.apk

  upload:
    needs: [ build ]
    name: Upload the signed artifact
    runs-on: ubuntu-latest
    steps:
      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: release.apk
          path: app/build/outputs/apk/release/release.apk